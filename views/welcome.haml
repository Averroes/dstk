.clearer{:style=>"clear:both"}

  .subtitle{:style=>"margin-top:-20px; font-size: 125%;"}
    An 
    %a{:href=>"http://github.com/petewarden/geodictapi"}open-source service
    for pulling location information from unstructured text.

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Steal this server!
    %a{:href=>"http://www.geodictapi.com/developerdocs#setup"} 
      Grab this entire site as a free, self-contained, ready-to-run VM
    %br
    %br
    <strong>Independence</strong> - Never worry about the provider going offline, or charging once you're hooked.
    %br
    %br
    <strong>Security</strong> - Run on your intranet, so customer information stays within the firewall.
    %br
    %br
    <strong>Scalability</strong> - No API limits. Run a cluster of as many instances as you need.
    %br
    %br
  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Street Address to Location
    Street Address to Location calculates the latitude/longitude coordinates for a postal address. 
    %br
    Currently restricted to the US.
    %br
    To call it, just make a request to
    %a{:href=>"/street2location/2543+Graystone+Place%2c+Simi+Valley%2c+CA+93065"} /street2location
    passing in a single address, or a JSON array of many addresses.

  .tryip2location{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some addresses into the box below to see what locations it finds.

  %textarea#street2locationtext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadstreet2locationtext.button{:style=>"width:150px; font-size: 125%;"} Locate Addresses
  
  #street2locationresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Location to Political Areas
    Calculates what countries, regions, states, counties, constituencies and neighborhoods the latitude/longitude coordinates lie within. 
    %br
    To call it, just make a request to
    %a{:href=>"/location2politics/37.769456%2c-122.429128"} /location2politics
    passing in a pair of coordinates, or a JSON array of many coordinates.

  .trylocation2politics{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some coordinates into the box below to see what it finds.

  %textarea#location2politicstext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadlocation2politicstext.button{:style=>"width:150px; font-size: 125%;"} Find
  
  #location2politicsresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Geodict
    Geodict pulls country, city and region names from unstructured English text, and returns their coordinates.
    %br
    It emulates the interface to 
    %a{:href=>"http://developer.yahoo.com/geo/placemaker/guide/web-service.html "}Yahoo's Placemaker
    , so switching should just mean changing 'http://wherein.yahooapis.com/' to 'http://www.geodictapi.com/' in your current code. 
  
  .trygeodict{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some text into the box below to see what locations it finds.

  %textarea#text{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext.button{:style=>"width:150px; font-size: 125%;"} Extract Locations
  
  #results{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 IP Address to Location
    IP Address to Location calculates country, state, city and latitude/longitude coordinates for IP addresses.
    %br
    To call it, just make a request to
    %a{:href=>"/ip2location/67.169.73.113"} /ip2location
    passing in a single address, or a JSON array or comma-separated list of many IPs.

  .tryip2location{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some IP addresses into the box below to see what locations it finds.

  %textarea#ip2locationtext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadip2locationtext.button{:style=>"width:150px; font-size: 125%;"} Locate IP Addresses
  
  #ip2locationresults{:style=>"margin-top:30px;"}


%script{:src=>"/scripts/jquery.exptextarea.js", :type=>"text/javascript"}
:javascript
  $(function() {
    $('#text').expandingTextArea()
    $('#ip2locationtext').expandingTextArea()
    $('#street2locationtext').expandingTextArea()
    $('#location2politicstext').expandingTextArea()

    $('#uploadtext').click(function() {
      var text = $('#text').val();
      if (text.length<1) {
        $('#results').html("No text found in input box.");
        return;
      }
      
      var apiUrl = '/v1/document';
      apiUrl += '?documentContent='+encodeURIComponent(text);
      apiUrl += '&outputType=json';
      
      // Handle the Placemaker test console
      $.ajax(apiUrl, {
        success: function(result) {
          if (typeof result['error'] !== 'undefined') {
            $('#results')
            .text(result.error);
            return;
          }

          $('#results').empty()
          
          var resultDoc = result['document'];
          var referenceList = resultDoc['referenceList'];
          
          for (var referenceIndex in referenceList) {
            
            var reference = referenceList[referenceIndex]['reference'];
            var placeDetailsIndex = reference['placeIds'];

            var placeDetail = resultDoc[placeDetailsIndex]['placeDetails'];
            var place = placeDetail['place'];
          
            var centroid = place['centroid'];

            var matchedString = reference['text'];
            var lat = centroid['latitude'];
            var lon = centroid['longitude'];
            var type = place['type'];
            var name = place['name'];

            if ((referenceList.length==1)&&(lat==0)&&(lon==0)) {
              $('#results')
              .text('No locations found');
              return;
            }
            
            var html = 
              '<div>"'
              +matchedString
              +'" matches the '
              +type.toLowerCase()
              +' '
              +name
              +' at <a href="http://maps.google.com/maps?sll='
              +lat
              +','
              +lon
              +'">'
              +lat
              +','
              +lon
              +'</a>'
              +'</div>';
            
            $('#results').append($(html));
          }
        }, 
        error: function(jqXHR, textStatus, errorCode) {
            $('#results').text('Error: '+textStatus);
        }, 
        dataType: 'jsonp',
        crossDomain: true
      });
    
    });

    // Handle the IP lookup test console
    $('#uploadip2locationtext').click(function() {
      var text = $('#ip2locationtext').val();
      if (text.length<1) {
        $('#ip2locationresults').html("No text found in input box.");
        return;
      }

      text = text.replace("\n", ",");
      text = text.replace(" ", ",");
            
      var apiUrl = '/ip2location';
      apiUrl += '/'+encodeURIComponent(text);
      
      $.ajax(apiUrl, {
        success: function(result) {
          if (typeof result['error'] !== 'undefined') {
            $('#ip2locationresults')
            .text(result.error);
            return;
          }

          $('#ip2locationresults').empty()
          
          for (var ip in result) {
            var info = result[ip];
            
            var html;
            if (info == null) {
              html = "<div>"+ip+" - NA</div>"
            } else {
            
              var lat = info['latitude'];
              var lon = info['longitude'];
              var country = info['country_name'];
              var region = info['region'];
              var city = info['locality'];
              var postal_code = info['postal_code'];
              
              html = 
                '<div>'
                +ip
                +' - '
                +city
                +', '
                +region
                +' '
                +postal_code
                +', '
                +country
                +' '
                +name
                +' at <a href="http://maps.google.com/maps?sll='
                +lat
                +','
                +lon
                +'">'
                +lat
                +','
                +lon
                +'</a>'
                +'</div>';
            }
            
            $('#ip2locationresults').append($(html));
          }
        }, 
        error: function(jqXHR, textStatus, errorCode) {
            $('#ip2locationresults').text('Error: '+textStatus);
        }, 
        dataType: 'jsonp',
        crossDomain: true
      });
    
    });

    // Handle the street address test console
    $('#uploadstreet2locationtext').click(function() {
      var text = $('#street2locationtext').val();
      if (text.length<1) {
        $('#street2locationresults').html("No text found in input box.");
        return;
      }

      addresses = text.split("\n");
      addresses_string = $.toJSON(addresses);

      var apiUrl = '/street2location';
      apiUrl += '/'+encodeURIComponent(addresses_string);
      
      $.ajax(apiUrl, {
        success: function(result) {
          if (typeof result['error'] !== 'undefined') {
            $('#street2locationresults')
            .text(result.error);
            return;
          }

          $('#street2locationresults').empty()
          
          for (var address in result) {
            var info = result[address];
            
            var html;
            if (info == null) {
              html = "<div>"+address+" - NA</div>"
            } else {
            
              var lat = info['latitude'];
              var lon = info['longitude'];
              var country = info['country_name'];
              var region = info['region'];
              var city = info['locality'];
              var street_address = info['street_address'];
              
              html = 
                '<div>"'
                +address
                +'" - '
                +street_address
                +', '
                +city
                +', '
                +region
                +', '
                +country
                +' at <a href="http://maps.google.com/maps?sll='
                +lat
                +','
                +lon
                +'">'
                +lat
                +','
                +lon
                +'</a>'
                +'</div>';
            }
            
            $('#street2locationresults').append($(html));
          }
        }, 
        error: function(jqXHR, textStatus, errorCode) {
            $('#street2locationresults').text('Error: '+textStatus);
        }, 
        dataType: 'jsonp',
        crossDomain: true
      });
    
    });

    // Handle the reverse geocoding test console
    $('#uploadlocation2politicstext').click(function() {
      var text = $('#location2politicstext').val();
      if (text.length<1) {
        $('#location2politicsresults').html("No text found in input box.");
        return;
      }

      coordinatesList = text.split("\n");
      if (coordinatesList.length==1) {
        apiDataString = coordinatesList[0];
      } else {
        output = [];
        for (coordinatesListIndex in coordinatesList) {
          coordinatesString = coordinatesList[coordinatesListIndex];
          coordinates = coordinatesString.split(',');
          if (coordinates.length!=2) {
            continue;
          }
          output.push({'latitude': coordinates[0], 'longitude': coordinates[1]});
        }
        apiDataString = $.toJSON(output);
      }

      var apiUrl = '/location2politics';
      apiUrl += '/'+encodeURIComponent(apiDataString);
      
      $.ajax(apiUrl, {
        success: function(result) {
          if (typeof result['error'] !== 'undefined') {
            $('#location2politicsresults')
            .text(result.error);
            return;
          }

          $('#location2politicsresults').empty()
          
          for (var index in result) {
            var info = result[index];
            
            var location = info['location'];
            var politics = info['politics'];
            
            var html = '<div>';
            html += '<a href="http://maps.google.com/maps?sll='
              +location.latitude
              +','
              +location.longitude
              +'">'
              +location.latitude
              +', '
              +location.longitude
              +'</a> - ';
            
            if (politics == null) {
              html += "NA";
            } else {
            
              for (var politicsIndex in politics) {
                var politic = politics[politicsIndex];
              
                var name = politic['name'];
                var code = politic['code'];
                var type = politic['friendly_type'];
                
                html += 
                  '('
                  +name
                  +', '
                  +code
                  +', '
                  +type
                  +') ';
                }
            }
            html += '</div>'
            
            $('#location2politicsresults').append($(html));
          }
        }, 
        error: function(jqXHR, textStatus, errorCode) {
            $('#location2politicsresults').text('Error: '+textStatus);
        }, 
        dataType: 'jsonp',
        crossDomain: true
      });
    
    });

  });
