.clearer{:style=>"clear:both"}

  .subtitle{:style=>"margin-top:-20px; font-size: 125%;"}
    An 
    %a{:href=>"http://github.com/petewarden/geodictapi"}open-source service
    for location information.

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Steal this server!
    %a{:href=>"http://www.geodictapi.com/developerdocs#setup"} 
      Grab this entire site as a free, self-contained, ready-to-run VM
    %br
    %br
    <strong>Independence</strong> - Never worry about the provider going offline, or charging once you're hooked.
    %br
    %br
    <strong>Security</strong> - Run on your intranet, so customer information stays within the firewall.
    %br
    %br
    <strong>Scalability</strong> - No API limits. Run a cluster of as many instances as you need.
    %br
    %br
  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Street Address to Coordinates
    Street Address to Location calculates the latitude/longitude coordinates for a postal address. 
    %br
    Currently restricted to the US.
    %br
    To call it, just make a request to
    %a{:href=>"/street2coordinates/2543+Graystone+Place%2c+Simi+Valley%2c+CA+93065"} /street2coordinates
    passing in a single address, or a JSON array of many addresses.

  .tryip2coordinates{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some addresses into the box below to see what locations it finds.

  %textarea#street2coordinatestext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadstreet2coordinatestext.button{:style=>"width:150px; font-size: 125%;"} Locate Addresses
  
  #street2coordinatesresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Coordinates to Political Areas
    Returns which countries, regions, states, counties, constituencies and neighborhoods a point is inside.
    %br
    To call it, just make a request to
    %a{:href=>"/coordinates2politics/37.769456%2c-122.429128"} /coordinates2politics
    passing in a pair of coordinates, or a JSON array of many coordinates.

  .trycoordinates2politics{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some coordinates into the box below to see what it finds.

  %textarea#coordinates2politicstext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadcoordinates2politicstext.button{:style=>"width:150px; font-size: 125%;"} Find
  
  #coordinates2politicsresults{:style=>"margin-top:30px;"}  

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 Geodict
    Geodict pulls country, city and region names from unstructured English text, and returns their coordinates.
    %br
    It emulates the interface to 
    %a{:href=>"http://developer.yahoo.com/geo/placemaker/guide/web-service.html "}Yahoo's Placemaker
    , so switching should just mean changing 'http://wherein.yahooapis.com/' to 'http://www.geodictapi.com/' in your current code. 
  
  .trygeodict{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some text into the box below to see what locations it finds.

  %textarea#text{:style=>"width: 800px; margin-top: 10px;"}

  #uploadtext.button{:style=>"width:150px; font-size: 125%;"} Extract Locations
  
  #results{:style=>"margin-top:30px;"}

  %div{:style=>"margin-top:20px; font-size: 125%;"}
    %h3 IP Address to Coordinates
    IP Address to Location calculates country, state, city and latitude/longitude coordinates for IP addresses.
    %br
    To call it, just make a request to
    %a{:href=>"/ip2coordinates/67.169.73.113"} /ip2coordinates
    passing in a single address, or a JSON array or comma-separated list of many IPs.

  .tryip2coordinates{:style=>"margin-top:20px; font-size: 125%;"}
    Try it for yourself. Copy and paste some IP addresses into the box below to see what locations it finds.

  %textarea#ip2coordinatestext{:style=>"width: 800px; margin-top: 10px;"}

  #uploadip2coordinatestext.button{:style=>"width:150px; font-size: 125%;"} Locate IPs
  
  #ip2coordinatesresults{:style=>"margin-top:30px;"}


%script{:src=>"/scripts/jquery.exptextarea.js", :type=>"text/javascript"}
:javascript
  $(function() {
    $('#text').expandingTextArea()
    $('#ip2coordinatestext').expandingTextArea()
    $('#street2coordinatestext').expandingTextArea()
    $('#coordinates2politicstext').expandingTextArea()

    // Switch when testing locally
    var dstk = $.DSTK();
    //var dstk = $.DSTK({apiBase:'http://localhost:4567'});

    $('#uploadtext').click(function() {
      var text = $('#text').val();
      if (text.length<1) {
        $('#results').html("No text found in input box.");
        return;
      }

      dstk.text2places(text, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#results')
          .text(result.error);
          return;
        }

        $('#results').empty();

        if (result.length<1) {
          $('#results')
          .text('No locations found');
          return;
        }

        for (var resultIndex in result) {
          var place = result[resultIndex];

          var matchedString = place['matched_string'];
          var lat = place['latitude'];
          var lon = place['longitude'];
          var type = place['type'];
          var name = place['name'];

          var html = 
            '<div>"'
            +matchedString
            +'" matches the '
            +type.toLowerCase()
            +' '
            +name
            +' at <a href="http://maps.google.com/maps?sll='
            +lat
            +','
            +lon
            +'">'
            +lat
            +','
            +lon
            +'</a>'
            +'</div>';
          
          $('#results').append($(html));
        }
      })
    });

    // Handle the IP lookup test console
    $('#uploadip2coordinatestext').click(function() {
      var text = $('#ip2coordinatestext').val();
      if (text.length<1) {
        $('#ip2coordinatesresults').html("No text found in input box.");
        return;
      }

      text = text.replace("\n", ",");
      text = text.replace(" ", ",");
      ips = text.split(',');

      dstk.ip2coordinates(ips, function(result) {
        if (typeof result['error'] !== 'undefined') {
          $('#results')
          .text(result.error);
          return;
        }
            
        $('#ip2coordinatesresults').empty()
        
        for (var ip in result) {
          var info = result[ip];
          
          var html;
          if (info == null) {
            html = "<div>"+ip+" - NA</div>"
          } else {
          
            var lat = info['latitude'];
            var lon = info['longitude'];
            var country = info['country_name'];
            var region = info['region'];
            var city = info['locality'];
            var postal_code = info['postal_code'];
            
            html = 
              '<div>'
              +ip
              +' - '
              +city
              +', '
              +region
              +' '
              +postal_code
              +', '
              +country
              +' '
              +name
              +' at <a href="http://maps.google.com/maps?sll='
              +lat
              +','
              +lon
              +'">'
              +lat
              +','
              +lon
              +'</a>'
              +'</div>';
          }
          
          $('#ip2coordinatesresults').append($(html));
        }
      });    
    });

    // Handle the street address test console
    $('#uploadstreet2coordinatestext').click(function() {
      var text = $('#street2coordinatestext').val();
      if (text.length<1) {
        $('#street2coordinatesresults').html("No text found in input box.");
        return;
      }

      addresses = text.split("\n");
      dstk.street2coordinates(addresses, function(result) {
      
        if (typeof result['error'] !== 'undefined') {
          $('#street2coordinatesresults')
          .text(result.error);
          return;
        }

        $('#street2coordinatesresults').empty()
        
        for (var address in result) {
          var info = result[address];
          
          var html;
          if (info == null) {
            html = "<div>"+address+" - NA</div>"
          } else {
          
            var lat = info['latitude'];
            var lon = info['longitude'];
            var country = info['country_name'];
            var region = info['region'];
            var city = info['locality'];
            var street_address = info['street_address'];
            
            html = 
              '<div>"'
              +address
              +'" - '
              +street_address
              +', '
              +city
              +', '
              +region
              +', '
              +country
              +' at <a href="http://maps.google.com/maps?sll='
              +lat
              +','
              +lon
              +'">'
              +lat
              +','
              +lon
              +'</a>'
              +'</div>';
          }
          
          $('#street2coordinatesresults').append($(html));
        }
      });
    
    });

    // Handle the reverse geocoding test console
    $('#uploadcoordinates2politicstext').click(function() {
      var text = $('#coordinates2politicstext').val();
      if (text.length<1) {
        $('#coordinates2politicsresults').html("No text found in input box.");
        return;
      }

      coordinatesList = text.split("\n");
      
      var coordinatesObjects = [];
      for (var index in coordinatesList) {
        var coordinates = coordinatesList[index].split(',');
        var coordinatesObject = {
          latitude: coordinates[0],
          longitude: coordinates[1]
        }
        coordinatesObjects.push(coordinatesObject);
      }
      
      dstk.coordinates2politics(coordinatesObjects, function(result) {

        if (typeof result['error'] !== 'undefined') {
          $('#coordinates2politicsresults')
          .text(result.error);
          return;
        }

        $('#coordinates2politicsresults').empty()
        
        for (var index in result) {
          var info = result[index];
          
          var location = info['location'];
          var politics = info['politics'];
          
          var html = '<div>';
          html += '<a href="http://maps.google.com/maps?sll='
            +location.latitude
            +','
            +location.longitude
            +'">'
            +location.latitude
            +', '
            +location.longitude
            +'</a> - ';
          
          if (politics == null) {
            html += "NA";
          } else {
          
            for (var politicsIndex in politics) {
              var politic = politics[politicsIndex];
            
              var name = politic['name'];
              var code = politic['code'];
              var type = politic['friendly_type'];
              
              html += 
                '('
                +name
                +', '
                +code
                +', '
                +type
                +') ';
              }
          }
          html += '</div>'
          
          $('#coordinates2politicsresults').append($(html));
        }
      })
    });

  });
