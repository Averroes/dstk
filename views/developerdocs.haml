.clearer{:style=>"clear:both"}

  .subtitle{:style=>"margin-top:-20px; font-size: 125%;"}

  .toc{:style=>"margin-top:30px; margin-bottom:30px; font-size: 125%;"}
    %a{:href=>"#usage"} Usage
    %br
    &nbsp;&nbsp;&nbsp;&nbsp;
    %a{:href=>"#geodict"} Geodict
    %br
    &nbsp;&nbsp;&nbsp;&nbsp;
    %a{:href=>"#ip2location"} IP Address to Location
    %br
    &nbsp;&nbsp;&nbsp;&nbsp;
    %a{:href=>"#street2location"} Street Address to Location
    %br
    %a{:href=>"#setup"} Setting up your own server
    %br
    &nbsp;&nbsp;&nbsp;&nbsp;
    %a{:href=>"#amazon"} Amazon EC2
    %br
    &nbsp;&nbsp;&nbsp;&nbsp;
    %a{:href=>"#vmware"} VMware
    %br

  .developerinfo{:style=>"margin-top:20px; font-size: 125%;"}

    %a{:name=>"usage"}
    :markdown
      ### Usage
      
    %br
    %a{:name=>"geodict"}
    :markdown
      #### Geodict

      As an emulation of Yahoo's service, a good place to start is [their Placemaker documentation](http://developer.yahoo.com/geo/placemaker/guide/web-service.html). There's also concrete examples of how to call the Placemaker API in the test_suite folder, and for Javascript in the source of the home page of this server. I've focused on supporting the most commonly used features of Yahoo's interface, so if you have some code that relies on something that's missing, [email me a sample of your source](mailto:pete@petewarden.com) and I'll do my best to add that in.
    
      Here's how the [Ushahidi Swift project](http://swift.ushahidi.com) calls Placemaker to pull the first location mentioned in a document.
    
      For the original Yahoo API:
      <hr>
      `define('BASE_URL', 'http://wherein.yahooapis.com/');`
      
      `define('APP_ID', '<Their API Key>');`
      <hr>
      
      Using GeodictAPI:
      
      <hr>
      `define('BASE_URL', 'http://www.geodictapi.com/');`
      
      `define('APP_ID', ''); // No API key needed`
      <hr>
      
      Code for calling the API and parsing the results:
      
      <hr>
      `$encodedLocation = \urlencode($location);`
      
      `$url = BASE_URL."v1/document";`

      `$postvars = "documentContent=$encodedLocation&documentType=text/plain&appid=$appid";`

      `$return = curl_request($url, $postvars);`

      `$xml = new \SimpleXMLElement($return);`

      `$long = (float) $xml->document->placeDetails->place->centroid->longitude;`

      `$latt = (float) $xml->document->placeDetails->place->centroid->latitude;`
      <hr>
      
      The results will differ between the two APIs, as the algorithms are quite different. In particular, I designed Geodict for applications that are intolerant of false positives, so for example Placemaker will flag "New York Times" as a location whereas Geodict will ignore it.

    %a{:name=>"ip2location"}
    :markdown
      #### IP Address to Location
      
      This API takes either a single numerical IP address, a comma-separated list, or a JSON-encoded array of addresses, and returns a JSON object with a key for every IP. The value for each key is either null if no information was found for the address, or an object containing location information, including country, region, city and latitude/longitude coordinates. Here's an example:
      <hr>
      `{"67.169.73.113":{`
      
      `"country_name":"United States",`
      
      `"area_code":415,`
      
      `"region":"CA",`
      
      `"postal_code":"94114",`
      
      `"city":"San Francisco",`
      
      `"latitude":37.7587013244629,`
      
      `"country_code":"US",`
      
      `"longitude":-122.438102722168,`
      
      `"country_code3":"USA",`
      
      `"dma_code":807}};`
      <hr>

      To call the API, you can make either a GET or a POST request to `/ip2location`. If you make a GET request, then you need to pass in the IP addresses in the suffix of the URL, eg `/ip2location/130.12.1.34%2C67.169.73.113`.

      Using GET you can also pass in a callback parameter in the URL, making it possible to run this as a JSONP cross-domain request. You can see this method in action if you view source on the home page of this server.
      
      You can also make a POST request passing in the IP addresses in the body of the request. This is useful if you have very large arrays of IP addresses you need to process, since you won't hit any URL size limits.
      
    %a{:name=>"street2location"}
    :markdown
      #### Street Address to Location
      
      This API takes either a single string representing a postal address, or a JSON-encoded array of addresses, and returns a JSON object with a key for every address. The value for each key is either null if no information was found for the address, or an object containing location information, including country, region, city and latitude/longitude coordinates. Here's an example:
      <hr>
      `curl "http://ww.geodictapi.com/street2location/2543+Graystone+Place%2c+Simi+Valley%2c+CA+93065"`
      
      `{"2543 Graystone Place, Simi Valley, CA 93065":{`

      `"street_name":"Graystone Pl",`

      `"country_code":"US",`

      `"latitude":34.280874,`

      `"street_address":"2543 Graystone Pl",`

      `"country_code3":"USA",`

      `"fips_county":"06111",`

      `"longitude":-118.766207,`

      `"country_name":"United States",`

      `"confidence":0.922,`

      `"region":"CA",`

      `"street_number":"2543",`

      `"locality":"Simi Valley"}}`
      <hr>

      To call the API, you can make either a GET or a POST request to `/street2location`. If you make a GET request, then you need to pass in the addresses in the suffix of the URL, as above.

      Using GET you can also pass in a callback parameter in the URL, making it possible to run this as a JSONP cross-domain request. You can see this method in action if you view source on the home page of this server.
      
      You can also make a POST request passing in the addresses in the body of the request. This is useful if you have very large arrays of addresses you need to process, since you won't hit any URL size limits.

    %a{:name=>"location2politics"}
    :markdown
      #### Location to Politics
      
      This API takes either a single string representing a comma-separated pair of latitude/longitude coordinates, or a JSON-encoded array of objects containing two keys, one for latitude and one for longitude. It returns a JSON array containing an object for every input location. The location member holds the coordinates that were queried, and politics holds an array of countries, states, provinces, cities, constituencies and neighborhoods that the point lies within. Here's an example:
      <hr>
      `curl "http://www.geodictapi.com/location2politics/37.769456%2c-122.429128"`
      
      `[{"location":{"latitude":"37.769456","longitude":"-122.429128"},"politics":[`
      
      `{"type":"admin2","code":"usa","friendly_type":"country","name":"United States"},`
      
      `{"type":"admin4","code":"us06","friendly_type":"state","name":"California"},`
      
      `{"type":"admin6","code":"06_075","friendly_type":"county","name":"San Francisco"},`
      
      `{"type":"admin5","code":"06_67000","friendly_type":"city","name":"San Francisco"},`
      
      `{"type":"constituency","code":"06_08","friendly_type":"constituency","name":"Eighth district, CA"}]}]`
      <hr>

      To combat errors caused by lack of precision, there's a small amount of fuzziness built into the algorithm, so that points that lie very close to borders get information on both possible areas they could be within.
      
      To call the API, you can make either a GET or a POST request to `/location2politics`. If you make a GET request, then you need to pass in the locations in the suffix of the URL, as above.

      Using GET you can also pass in a callback parameter in the URL, making it possible to run this as a JSONP cross-domain request. You can see this method in action if you view source on the home page of this server.
      
      You can also make a POST request passing in the locations in the body of the request. This is useful if you have very large arrays of locations you need to process, since you won't hit any URL size limits.
      
    %a{:name=>"setup"}
    :markdown
      ### Setting up your own server

      You can get started using the "http://www.geodictapi.com/" server, but for intensive use or to run behind a firewall, you'll probably want to create your own machine.

    %a{:name=>"amazon"}
    :markdown
      The simplest way to create a server is to grab a virtual machine. This whole server is available ready-to-go as either a VMware or Amazon EC2 Image. 
      
      For Amazon, find the AMI with the id `ami-7ac53713`. Start a new instance from this image, wait a couple of minutes for the machine to boot up, and then paste the public DNS name of the instance into your browser. You should see the normal home page of this site. You can test that it's working by pasting text into the main input. You can then just change your code base URL to that DNS name, and start using the API from your own server immediately.

    %a{:name=>"vmware"}
    :markdown
      For VMware, first [download the free Player application](http://www.vmware.com/products/player/). Then [download the Virtual Application image for the server](http://www.openheatmap.com/geodictapi_v1.10.vmwarevm.zip) and unzip it. Start up the VM, log in as 'ubuntu'/'changeme', and then type `ifconfig`. This will give you the VM's local IP address, so if you type that into the console you'll bring up this website, and be able to use it as an API endpoint.

      If you want to roll your own server from source on an in-house machine, or on another hosting provider, serversetup.txt contains instructions on the exact steps I took to create that image starting from a clean Ubuntu 10.04 installation.
