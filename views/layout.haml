%html
  %head
    %title GeodictAPI #{if @title then ' | '+@title else '' end}
    %link{:rel=>"stylesheet", :type=>"text/css", :href=>"/css/main.css"}
    %script{:src=>"/scripts/jquery.min.js", :type=>"text/javascript"}
    %script{:src=>"/scripts/jquery.dstk.js", :type=>"text/javascript"}

  %body
    .centering{:style=>"text-align: center;"}
      #container.ui-corner-all{:style=>"text-align: left;"}
        #header.ui-corner-all
          %a{:style=>"text-decoration:none;", :href=>"/"}
            %img.headerlogo{:src=>"/images/textlogo.png", :width=>"140", :height=>"28"}
        .clearer{:style=>"clear:both"}
        .headline #{if @headline then @headline else '' end}
        .clearer{:style=>"clear:both"}
        .ui-corner-all
          = yield
          
      #footer
        %a{:href=>"http://github.com/petewarden/geodictapi"} Source Code
        =" | "
        %a{:href=>"http://www.geodictapi.com/developerdocs"} Documentation
        =" | "
        %a{:href=>"/about"} About
      
      #footer_byline

    :javascript

      (function ($) {
          $.fn.staticfade = function(elements, settings) {

              this.__constructor = function(elements, settings) {

                  var defaults = {
                      fadeTime: 500,
                      holdTime: 3000
                  };
           
                  if (settings) 
                      settings = $.extend(defaults, settings);
                  else
                      settings = defaults;

                  this.settings = settings;

                  this.animationFunctions = [];
                  
                  var self = this;
                  this.each(function() {
                  
                      $(this).empty();

                      for (var index in elements) {
                          var element = elements[index];
                                              
                          var isLast = (index==(elements.length-1));
                          var nextIndex;
                          if (isLast) {
                              nextIndex = 0;
                          } else {
                              nextIndex = ((Number)(index)+1);
                          }

                          self.animationFunctions[index] = function() {
                              var myElement = element;
                              var mySelf = self;
                              var myNextIndex = nextIndex;

                              return function() {

                                  myElement
                                  .stop()
                                  .css({display:'block'})
                                  .animate({opacity:1.0 }, mySelf.settings.fadeTime )
                                  .animate({opacity:1.0}, mySelf.settings.holdTime)
                                  .animate({opacity:0.0 }, mySelf.settings.fadeTime, 'swing', function() {
                                      mySelf.animationFunctions[myNextIndex]();
                                  })
                                  .animate({opacity:0.0}, 0, 'swing', function() { myElement.css({display:'none'}); });
                              };
                          }();
                      }
                      
                      var isFirst = true;
                      for (index in elements) {
                          var element = elements[index];
                          
                          if (isFirst) {
                              element.css({
                                  opacity: 1.0
                              });
                          } else {
                              element.css({
                                  opacity: 0.0,
                                  display: 'none'
                              });
                          }
                          
                          $(this).append(element);
                          
                          isFirst = false;
                      }
                      
                      self.animationFunctions[0]();
                  });
                  
              };

              this.__constructor(elements, settings);
              
              return this;
          };

      }(jQuery));

      $(function() {
        $('#footer_byline').staticfade([
            $('<div>Country boundaries by <a href="http://thematicmapping.org/">Thematic Mapping</a></div>'),
            $('<div>Contains Ordnance Survey data <a href="http://www.ordnancesurvey.co.uk/oswebsite/opendata/licence/index.html">Â© Crown copyright and database right 2010</a></div>'),
            $('<div>Irish boundaries by <a href="http://www.tallyroom.com.au/maps">Ben Raue</a></div>'),
            $('<div>New Zealand boundaries from <a href="http://www.stats.govt.nz/">Statistics NZ</a>, converted using <a href="http://www.koordinates.com">Koordinates</a></div>'),
            $('<div>Worldwide states and provinces from <a href="http://naturalearthdata.com">Natural Earth</a></div>'),
            $('<div>Using geocoding code from <a href="https://github.com/geocommons/geocoder">Schuyler Erle</a></div>'),
            $('<div>US neighborhood boundaries provided by <a href="http://www.zillow.com/howto/api/neighborhood-boundaries.htm">Zillow</a></div>'),
            $('<div>This product includes GeoLite data created by MaxMind, available from <a href="http://www.maxmind.com/">http://www.maxmind.com/</a></div>')
          ],
          {
            fadeTime: 1000,
            holdTime: 5000
          }
        );
      });